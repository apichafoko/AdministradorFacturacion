@model IndexViewModel
            <div class="row">
                <div class="col-lg-12 col-md-6 mb-4">
                    <div class="card shadow-sm rounded border-light style="border-radius: .55rem">
                        <div class="card-body">
                            <p class="card-text" style="font-style: italic;text-align: center;">
                                Esta sección muestra los datos historicos filtrados por cirujano
                            </p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <!-- Tarjeta 1 -->
                <div class="col-lg-6 col-md-6 mb-4">
                    <div class="card text-center shadow-sm">
                        <div class="card-body">
                            <h2 class="card-title display-4 text-primary"><span style="color: black;">@Model.CirujanoSeleccionado</span></h2>
                            <p class="card-text">Cirujano seleccionado</p>
                        </div>
                    </div>
                </div>
                 <div class="col-lg-6 col-md-6 mb-4">
                    <div class="card text-center shadow-sm">
                        <div class="card-body">
                            <h2 class="card-title display-4 text-primary"><span style="color: black;">@Model.ListadoBoletasCirujanoSeleccionado.Count()</span></h2>
                            <p class="card-text">Boletas Totales</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
             <!-- Gráfico -->
                <div class="col-lg-12 col-md-12 mb-4">
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <canvas id="graficosBoletasEntidadSelectedSurgeon"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 mb-4">
                    <div class="card shadow-sm">
                        <div class="card-body" style="width: 100%;">
                                <canvas id="graficoHospitalesSelectedSurgeon"></canvas>
                        </div>
                    </div>
                </div>
            </div>   
          
            <div class="row">
                <div class="col-lg-12 col-md-12 mb-4">
                        <h3 class="mb-4">Resumen por período del Cirujano (@Model.CirujanoSeleccionado)</h3>
                        <div class="table-responsive">
                            <table id="tablaBoletasResumenSelectedSurgeon" class="table table-bordered table-hover align-middle display nowrap" style="width:100%">
                                <thead class="table-light">
                                    <tr>
                                            <th>Período</th>
                                            <th>Hospital</th>
                                            <th>Cirujano</th>
                                            <th>Cantidad de boletas</th>                                            
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.BoletasPorPeriodoCirujanoSeleccionado.ToList())
                                    {
                                        <tr>
                                            
                                            <td>@item.PeriodoAnio - @item.PeriodoMes</td>
                                            <td>@item.Hospital</td>
                                            <td>@item.Cirujano</td>
                                            <td>@item.Cantidad</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 mb-4">
                        <h3 class="mb-4">Boletas del Cirujano (@Model.CirujanoSeleccionado)</h3>
                        <div class="table-responsive">
                            <table id="tablaBoletasSelectedSurgeon" class="table table-bordered table-hover align-middle display nowrap" style="width:100%">
                                <thead class="table-light">
                                    <tr>
                                            <th>Número Boleta</th>
                                            <th>Fecha</th>
                                            <th>Periodo</th>
                                            <th>Mutual</th>
                                            <th>Hospital</th>
                                            <th>Cirujano</th>                                            
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.ListadoBoletasCirujanoSeleccionado.OrderByDescending(s => DateTime.Parse(s.Periodo)).ToList())
                                    {
                                        <tr>
                                            <td>@item.NumeroBoleta</td>
                                            <td>@item.Fecha.ToShortDateString()</td>
                                            <td>@item.PeriodoAnio - @item.PeriodoMes</td>
                                            <td>@item.EntidadCodigo - @item.EntidadTexto</td>
                                            <td>@item.Hospital</td>
                                            <td>@item.Cirujano</td>
                                            
                                        </tr>
                                    }
                                </tbody>
                                  <tfoot>
                                    <tr>
                                            <th>Número Boleta</th>
                                            <th>Fecha</th>
                                            <th>Periodo</th>
                                            <th>Mutual</th>
                                            <th>Hospital</th>
                                            <th>Cirujano</th>    
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                </div>
            </div>
    

    
    <script type='text/javascript'>
// Obtener las entidades y las cantidades de boletas
    var entidades = @Html.Raw(Json.Serialize(Model.SelectedPeriodVM.BoletasPorEntidad.Keys));
    var cantidades = @Html.Raw(Json.Serialize(Model.SelectedPeriodVM.BoletasPorEntidad.Values));

    // Calcular el total de boletas
    var total = cantidades.reduce((a, b) => a + b, 0);

    // Configurar el gráfico de torta con Chart.js
    var ctx = document.getElementById('graficosBoletasEntidadSelectedSurgeon').getContext('2d');
    
    var chart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: entidades, // Etiquetas de las entidades
            datasets: [{
                label: 'Cantidad de boletas',
                data: cantidades, // Valores correspondientes a las boletas
                backgroundColor: [
                    'rgba(54, 162, 235, 0.6)',
                    'rgba(255, 99, 132, 0.6)',
                    'rgba(255, 205, 86, 0.6)',
                    'rgba(75, 192, 192, 0.6)',
                    'rgba(153, 102, 255, 0.6)',
                    'rgba(255, 159, 64, 0.6)'
                ],
                borderColor: [
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 99, 132, 1)',
                    'rgba(255, 205, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'left',
                     // Leyenda en la parte superior
                },
                tooltip: {
                    callbacks: {
                        label: function(tooltipItem) {
                           var dataset = tooltipItem.chart.data.datasets[0]; // Obtener el dataset
                            var value = dataset.data[tooltipItem.dataIndex]; // Obtener el valor correcto usando el índice
                            var total = dataset.data.reduce((a, b) => a + b, 0); // Calcular el total de las boletas
                            var percentage = ((value / total) * 100).toFixed(2); // Calcular el porcentaje correcto

                            var label = tooltipItem.label || '';

                            // Devolver el texto del tooltip con cantidad y porcentaje en negrita
                            return `${label}: ${value} boletas (${percentage}%)`;
                        }
                    }
                },
                title: {
                    display: true, // Mostrar el título
                    text: `Cantidad de boletas por Mutual (Cirujano seleccionado: @Model.CirujanoSeleccionado)`, // Texto del título
                    font: {
                        size: 20 // Tamaño de la fuente del título
                    },
                    padding: {
                        top: 10,
                        bottom: 30
                    }
                }
            },
            onClick: function(e, elements) {
                if (elements.length > 0) {
                    var index = elements[0].index;
                    var dataset = chart.data.datasets[0];
                    
                    // "Explotar" la porción haciendo que su tamaño aumente temporalmente
                    if (!dataset._meta) {
                        dataset._meta = Array(dataset.data.length).fill(false);
                    }
                    dataset._meta[index] = !dataset._meta[index];
                    dataset.borderWidth = dataset._meta.map(v => v ? 4 : 1); // Aumentar borde si está explotada
                    chart.update();
                }
            }
        }
    });

    // Redibujar el gráfico cuando la ventana se redimensiona o al cargar
    window.addEventListener('resize', function() {
        chart.resize(); // Volver a renderizar el gráfico
    });

    // Redibujar el gráfico al cargar la página completamente
    window.addEventListener('load', function() {
        chart.resize();
    });    
    </script>

     @if(Model.SelectedPeriodVM.CantidadBoletasDiaPublico != null || Model.SelectedPeriodVM.CantidadBoletasDiaPrivado != null)
        {
        <!--Grafico Distribución de boletas por dia último periodo -->
        <script type="text/javascript">
    // Datos de boletas del sector público
    var cantidadBoletasDiaPublico = @Html.Raw(Json.Serialize(Model.SelectedPeriodVM.CantidadBoletasDiaPublico));
    var cantidadBoletasDiaPrivado = @Html.Raw(Json.Serialize(Model.SelectedPeriodVM.CantidadBoletasDiaPrivado));

    var datasets = [];
    var labels = [];

    if (cantidadBoletasDiaPublico) {
        var labelsPublico = Object.keys(cantidadBoletasDiaPublico);
        labels = [...new Set([...labels, ...labelsPublico])];
        var dataPublico = labels.map(function(day) {
            return cantidadBoletasDiaPublico[day] || 0;
        });
        datasets.push({
            label: 'Boletas Públicas',
            data: dataPublico,
            backgroundColor: 'rgba(0, 123, 255, 0.6)',
            borderColor: '#007BFF',
            borderWidth: 1
        });
    }

    if (cantidadBoletasDiaPrivado) {
        var labelsPrivado = Object.keys(cantidadBoletasDiaPrivado);
        labels = [...new Set([...labels, ...labelsPrivado])];
        var dataPrivado = labels.map(function(day) {
            return cantidadBoletasDiaPrivado[day] || 0;
        });
        datasets.push({
            label: 'Boletas Privadas',
            data: dataPrivado,
            backgroundColor: 'rgba(75, 192, 75, 0.6)',
            borderColor: 'rgba(75, 192, 75, 1)',
            borderWidth: 1
        });
    }

    

    var ctx = document.getElementById('graficoBoletasSelectedPeriod').getContext('2d');
    var graficoBoletasCombinado = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: datasets
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: {
                    stacked: true
                },
                y: {
                    stacked: true,
                    beginAtZero: true
                }
            },
            plugins: {
                tooltip: {
                    callbacks: {
                        label: function(tooltipItem) {
                            var label = tooltipItem.dataset.label || '';
                            var value = tooltipItem.raw;
                            return label + ': ' + value.toLocaleString();
                        }
                    }
                },
                legend: {
                    display: true,
                    position: 'top'
                }
            }
        }
    });
        </script>
        }

    <script type="text/javascript">
    // Obtener las entidades y las cantidades de boletas
    var entidades = @Html.Raw(Json.Serialize(Model.SelectedPeriodVM.CantidadBoletasPorHospital.Keys));
    var cantidades = @Html.Raw(Json.Serialize(Model.SelectedPeriodVM.CantidadBoletasPorHospital.Values));

    // Calcular el total de boletas
    var total = cantidades.reduce((a, b) => a + b, 0);

    // Configurar el gráfico de torta con Chart.js
    var ctx = document.getElementById('graficoHospitalesSelectedSurgeon').getContext('2d');
    
    var chart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: entidades, // Etiquetas de las entidades
            datasets: [{
                label: 'Cantidad de boletas',
                data: cantidades, // Valores correspondientes a las boletas
                backgroundColor: [
                    'rgba(54, 162, 235, 0.6)',
                    'rgba(255, 99, 132, 0.6)',
                    'rgba(255, 205, 86, 0.6)',
                    'rgba(75, 192, 192, 0.6)',
                    'rgba(153, 102, 255, 0.6)',
                    'rgba(255, 159, 64, 0.6)'
                ],
                borderColor: [
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 99, 132, 1)',
                    'rgba(255, 205, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'left',
                     // Leyenda en la parte superior
                },
                tooltip: {
                    callbacks: {
                        label: function(tooltipItem) {
                           var dataset = tooltipItem.chart.data.datasets[0]; // Obtener el dataset
                            var value = dataset.data[tooltipItem.dataIndex]; // Obtener el valor correcto usando el índice
                            var total = dataset.data.reduce((a, b) => a + b, 0); // Calcular el total de las boletas
                            var percentage = ((value / total) * 100).toFixed(2); // Calcular el porcentaje correcto

                            var label = tooltipItem.label || '';

                            // Devolver el texto del tooltip con cantidad y porcentaje en negrita
                            return `${label}: ${value} cirugias (${percentage}%)`;
                        }
                    }
                },
                title: {
                    display: true, // Mostrar el título
                    text: 'Cantidad de boletas por Hospital (Cirujano seleccionado:  @Model.CirujanoSeleccionado)', // Texto del título
                    font: {
                        size: 20 // Tamaño de la fuente del título
                    },
                    padding: {
                        top: 10,
                        bottom: 30
                    }
                }
            },
            onClick: function(e, elements) {
                if (elements.length > 0) {
                    var index = elements[0].index;
                    var dataset = chart.data.datasets[0];
                    
                    // "Explotar" la porción haciendo que su tamaño aumente temporalmente
                    if (!dataset._meta) {
                        dataset._meta = Array(dataset.data.length).fill(false);
                    }
                    dataset._meta[index] = !dataset._meta[index];
                    dataset.borderWidth = dataset._meta.map(v => v ? 4 : 1); // Aumentar borde si está explotada
                    chart.update();
                }
            }
        }
    });

    // Redibujar el gráfico cuando la ventana se redimensiona o al cargar
    window.addEventListener('resize', function() {
        chart.resize(); // Volver a renderizar el gráfico
    });

    // Redibujar el gráfico al cargar la página completamente
    window.addEventListener('load', function() {
        chart.resize();
    });
    </script>

    <script type="text/javascript">

    const nombreArchivo = 'Boletas_Por_Cirujano_' + '@Model.CirujanoSeleccionado';
    const tituloDocumento = 'Boletas del cirujano:' + '@Model.CirujanoSeleccionado';

    $(document).ready(function () {
                         $('#tablaBoletasResumenSelectedSurgeon').DataTable({
                            paging: true, // Habilitar paginación
                            pageLength: 50, // Mostrar 12 registros por página
                            lengthChange: true, // Permitir al usuario cambiar la cantidad de registros
                            searching: true, // Habilitar búsqueda
                            ordering: true, // Permitir ordenar columnas
                            info: true, // Mostrar información del número de registros
                            autoWidth: false, // Auto-ajuste de ancho de columnas
                            responsive: true, // Habilitar responsividad
                            dom: 'Bfrtip', // Elementos a incluir (B=botones, f=buscador, r=progreso, t=tabla, i=información, p=paginación)
                            buttons: [
                            {
                                extend: 'copy',
                                title: tituloDocumento,
                                filename: nombreArchivo,
                                text: 'Copiar'
                            },
                            {
                                extend: 'csv',
                                title: tituloDocumento,
                                filename: nombreArchivo,
                                text: 'Exportar CSV'
                            },
                            {
                                extend: 'excel',
                                title: tituloDocumento,
                                filename: nombreArchivo,
                                text: 'Exportar Excel'
                            },
                            {
                                extend: 'pdf',
                                title: tituloDocumento,
                                filename: nombreArchivo,
                                text: 'Exportar PDF'
                            }
                        ],
                            order: [], // Desactiva el orden automático
                            language: {
                                url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-ES.json' // Cargar traducción en español
                            }
                        });
            });
    </script>
    <script type="text/javascript">
    $(document).ready(function () {
    // Setup - add a text input to each footer cell
    $('#tablaBoletasSelectedSurgeon tfoot th').each(function (i) {
        var title = $('#tablaBoletasSelectedSurgeon thead th')
            .eq($(this).index())
            .text();
        $(this).html(
            '<input type="text" placeholder="' + title + '" data-index="' + i + '" />'
        );
    });
 
    // DataTable
   var tablaBoletaSelected =  $('#tablaBoletasSelectedSurgeon').DataTable({
                            paging: true, // Habilitar paginación
                            pageLength: 50, // Mostrar 12 registros por página
                            lengthChange: true, // Permitir al usuario cambiar la cantidad de registros
                            searching: true, // Habilitar búsqueda
                            ordering: true, // Permitir ordenar columnas
                            info: true, // Mostrar información del número de registros
                            autoWidth: false, // Auto-ajuste de ancho de columnas
                            responsive: true, // Habilitar responsividad
                            dom: 'Bfrtip', // Elementos a incluir (B=botones, f=buscador, r=progreso, t=tabla, i=información, p=paginación)
                            buttons: [
                                {
                                    extend: 'copy',
                                    title: tituloDocumento,
                                    filename: nombreArchivo,
                                    text: 'Copiar'
                                },
                                {
                                    extend: 'csv',
                                    title: tituloDocumento,
                                    filename: nombreArchivo,
                                    text: 'Exportar CSV'
                                },
                                {
                                    extend: 'excel',
                                    title: tituloDocumento,
                                    filename: nombreArchivo,
                                    text: 'Exportar Excel'
                                },
                                {
                                    extend: 'pdf',
                                    title: tituloDocumento,
                                    filename: nombreArchivo,
                                    text: 'Exportar PDF'
                                }
                            ],
                            order: [], // Desactiva el orden automático
                            language: {
                                url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-ES.json' // Cargar traducción en español
                            }
                        });
 
    // Filter event handler
    $('#tablaBoletasSelectedSurgeon').on('keyup', 'tfoot input', function () {
        console.log("Keyup detectado", this);
        tablaBoletaSelected
        .columns($(this).data('index'))
        .search(this.value)
        .draw();
    });

});

    </script>



  

 

        